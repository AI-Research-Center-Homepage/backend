[33mcommit df0aca95a69ce36e9e55d03b97eb0c5e035afc8b[m
Author: Flre-fly <66842566+Flre-fly@users.noreply.github.com>
Date:   Thu May 19 16:30:56 2022 +0900

    backend-22 login 구현
    -> test : admin과 member를 함께 update, delete하는 test작성

[1mdiff --git a/src/main/java/byuntil/backend/admin/domain/Admin.java b/src/main/java/byuntil/backend/admin/domain/Admin.java[m
[1mindex ff473d3..f219d32 100644[m
[1m--- a/src/main/java/byuntil/backend/admin/domain/Admin.java[m
[1m+++ b/src/main/java/byuntil/backend/admin/domain/Admin.java[m
[36m@@ -1,10 +1,7 @@[m
 package byuntil.backend.admin.domain;[m
 [m
 import byuntil.backend.member.domain.entity.member.Member;[m
[31m-import lombok.AllArgsConstructor;[m
[31m-import lombok.Builder;[m
[31m-import lombok.Getter;[m
[31m-import lombok.NoArgsConstructor;[m
[32m+[m[32mimport lombok.*;[m
 import org.apache.catalina.User;[m
 [m
 import javax.persistence.*;[m
[36m@@ -14,6 +11,7 @@[m [mimport java.util.Set;[m
 @Entity[m
 @Builder[m
 @Getter[m
[32m+[m[32m@Setter[m
 @AllArgsConstructor[m
 @NoArgsConstructor[m
 public class Admin {[m
[1mdiff --git a/src/main/java/byuntil/backend/admin/service/UserDetailService.java b/src/main/java/byuntil/backend/admin/service/UserDetailService.java[m
[1mindex 1e867f0..4bed23e 100644[m
[1m--- a/src/main/java/byuntil/backend/admin/service/UserDetailService.java[m
[1m+++ b/src/main/java/byuntil/backend/admin/service/UserDetailService.java[m
[36m@@ -28,20 +28,20 @@[m [mpublic class UserDetailService implements UserDetailsService {[m
     private final PasswordEncoder passwordEncoder;[m
 [m
     @Transactional[m
[31m-    public Long signUp(AdminDto dto){[m
[32m+[m[32m    public Long signUp(Admin admin){[m
         //중복회원이 있을 시 예외[m
[31m-        adminRepository.findByLoginId(dto.getLoginId()).ifPresent((m -> {[m
[31m-            throw new LoginIdDuplicationException("이미 존재하는 회원입니다.");[m
[31m-        }));[m
[32m+[m[32m        String encodedPw = passwordEncoder.encode(admin.getLoginPw());[m
 [m
[31m-        String encodedPw = passwordEncoder.encode(dto.getPassword());[m
[31m-[m
[31m-        Admin admin = dto.toEntity();[m
         admin.changePw(encodedPw);[m
 [m
[31m-[m
         return adminRepository.save(admin).getId();[m
     }[m
[32m+[m[32m    @Transactional[m
[32m+[m[32m    public void encodedPw(Admin admin){[m
[32m+[m[32m        //암호화하고 update[m
[32m+[m[32m        String encodedPw = passwordEncoder.encode(admin.getLoginPw());[m
[32m+[m[32m        admin.changePw(encodedPw);[m
[32m+[m[32m    }[m
 [m
     public Optional<Admin> findById(Long id){[m
         return adminRepository.findById(id);[m
[36m@@ -49,6 +49,9 @@[m [mpublic class UserDetailService implements UserDetailsService {[m
     public Optional<Admin> findByLoginId(String loginId){[m
         return adminRepository.findByLoginId(loginId);[m
     }[m
[32m+[m[32m    public void deleteById(Long id){[m
[32m+[m[32m        adminRepository.deleteById(id);[m
[32m+[m[32m    }[m
 [m
     @Override[m
     public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {[m
[1mdiff --git a/src/main/java/byuntil/backend/member/domain/entity/member/Member.java b/src/main/java/byuntil/backend/member/domain/entity/member/Member.java[m
[1mindex 51f3da6..6a40ab7 100644[m
[1m--- a/src/main/java/byuntil/backend/member/domain/entity/member/Member.java[m
[1m+++ b/src/main/java/byuntil/backend/member/domain/entity/member/Member.java[m
[36m@@ -1,6 +1,7 @@[m
 package byuntil.backend.member.domain.entity.member;[m
 [m
 import byuntil.backend.admin.domain.Admin;[m
[32m+[m[32mimport byuntil.backend.admin.domain.UserRole;[m
 import byuntil.backend.member.domain.entity.Member_Thesis;[m
 import byuntil.backend.member.dto.request.MemberUpdateRequestDto;[m
 import lombok.AllArgsConstructor;[m
[36m@@ -66,6 +67,8 @@[m [mpublic abstract class Member {[m
         this.email = dto.getEmail();[m
         this.major = dto.getMajor();[m
         this.image = dto.getImage();[m
[32m+[m[32m        this.admin.setLoginId(dto.getAdminDto().getLoginId());[m
[32m+[m[32m        this.admin.setRole(UserRole.valueOf(dto.getAdminDto().getAuthorities().toArray()[0].toString()));[m
     }[m
     public void addMemberThesis(Member_Thesis memberThesis){[m
         this.theses.add(memberThesis);[m
[1mdiff --git a/src/main/java/byuntil/backend/member/dto/request/MemberUpdateRequestDto.java b/src/main/java/byuntil/backend/member/dto/request/MemberUpdateRequestDto.java[m
[1mindex c574bd3..2e792ab 100644[m
[1m--- a/src/main/java/byuntil/backend/member/dto/request/MemberUpdateRequestDto.java[m
[1m+++ b/src/main/java/byuntil/backend/member/dto/request/MemberUpdateRequestDto.java[m
[36m@@ -1,5 +1,6 @@[m
 package byuntil.backend.member.dto.request;[m
 [m
[32m+[m[32mimport byuntil.backend.admin.domain.dto.AdminDto;[m
 import lombok.Builder;[m
 import lombok.Getter;[m
 import lombok.NoArgsConstructor;[m
[36m@@ -19,8 +20,11 @@[m [mpublic class MemberUpdateRequestDto {[m
     private String number;[m
     private String research;[m
 [m
[32m+[m[32m    private AdminDto adminDto;[m
[32m+[m
     @Builder[m
[31m-    public MemberUpdateRequestDto(String name, String major, String email, String image, String position, String admission, String doctorate, String location, String number, String research) {[m
[32m+[m[32m    public MemberUpdateRequestDto(String name, String major, String email, String image, String position, String admission,[m
[32m+[m[32m                                  String doctorate, String location, String number, String research, AdminDto adminDto) {[m
         this.name = name;[m
         this.major = major;[m
         this.email = email;[m
[36m@@ -31,5 +35,6 @@[m [mpublic class MemberUpdateRequestDto {[m
         this.location = location;[m
         this.number = number;[m
         this.research = research;[m
[32m+[m[32m        this.adminDto = adminDto;[m
     }[m
 }[m
[1mdiff --git a/src/main/java/byuntil/backend/member/service/MemberService.java b/src/main/java/byuntil/backend/member/service/MemberService.java[m
[1mindex 8bc0b7c..d9a8a90 100644[m
[1m--- a/src/main/java/byuntil/backend/member/service/MemberService.java[m
[1m+++ b/src/main/java/byuntil/backend/member/service/MemberService.java[m
[36m@@ -2,11 +2,14 @@[m [mpackage byuntil.backend.member.service;[m
 [m
 import byuntil.backend.admin.domain.Admin;[m
 import byuntil.backend.admin.repository.AdminRepository;[m
[32m+[m[32mimport byuntil.backend.admin.service.UserDetailService;[m
[32m+[m[32mimport byuntil.backend.common.exception.LoginIdDuplicationException;[m
 import byuntil.backend.member.domain.entity.member.*;[m
 import byuntil.backend.member.domain.repository.MemberRepository;[m
 import byuntil.backend.member.dto.request.MemberSaveRequestDto;[m
 import byuntil.backend.member.dto.request.MemberUpdateRequestDto;[m
 import lombok.RequiredArgsConstructor;[m
[32m+[m[32mimport org.springframework.security.core.userdetails.UserDetailsService;[m
 import org.springframework.stereotype.Service;[m
 import org.springframework.transaction.annotation.Transactional;[m
 [m
[36m@@ -19,7 +22,7 @@[m [mimport java.util.Optional;[m
 @RequiredArgsConstructor[m
 public class MemberService {[m
     private final MemberRepository memberRepository;[m
[31m-    private final AdminRepository adminRepository;[m
[32m+[m[32m    private final UserDetailService userDetailService;[m
 [m
     @Transactional[m
     public Long saveMember(MemberSaveRequestDto dto) {[m
[36m@@ -27,8 +30,11 @@[m [mpublic class MemberService {[m
         Admin admin = dto.getAdminDto().toEntity();[m
         admin.addMember(member);*/[m
         //dto를 entity로 만들고 admin도 entity로만든다음에 return함[m
[32m+[m[32m        userDetailService.findByLoginId(dto.getAdminDto().getLoginId()).ifPresent((m -> {[m
[32m+[m[32m            throw new LoginIdDuplicationException("이미 존재하는 회원입니다.");[m
[32m+[m[32m        }));[m
         Admin admin = dto.dtosToEntity();[m
[31m-        adminRepository.save(admin);[m
[32m+[m[32m        userDetailService.signUp(admin);[m
         memberRepository.save(admin.getMember());[m
 [m
         return admin.getMember().getId();[m
[36m@@ -64,9 +70,10 @@[m [mpublic class MemberService {[m
     }[m
 [m
     @Transactional[m
[31m-    public void updateMember(Long id, MemberUpdateRequestDto requestDto) throws Throwable {[m
[32m+[m[32m    public Member updateMember(Long id, MemberUpdateRequestDto requestDto) throws Throwable {[m
         Member member = (Member) memberRepository.findById(id).orElseThrow(EntityNotFoundException::new);[m
         member.update(requestDto);[m
[32m+[m[32m        //그리고 암호화를 해주어야한다[m
 [m
         if (member instanceof Professor) {[m
             Professor professor = (Professor) member;[m
[36m@@ -84,10 +91,14 @@[m [mpublic class MemberService {[m
             Undergraduate undergraduate = (Undergraduate) member;[m
             undergraduate.update(requestDto.getAdmission(), requestDto.getResearch());[m
         }[m
[32m+[m[32m        return member;[m
     }[m
 [m
     @Transactional[m
     public void delete(Long id) {[m
[31m-        memberRepository.delete(memberRepository.findById(id).get());[m
[32m+[m[32m        Member member = (Member) memberRepository.findById(id).get();[m
[32m+[m[32m        memberRepository.delete(member);[m
[32m+[m[32m        //연관되어있는 admin도 삭제[m
[32m+[m[32m        userDetailService.deleteById(member.getAdmin().getId());[m
     }[m
 }[m
[1mdiff --git a/src/test/java/byuntil/backend/admin/service/AdminServiceTest.java b/src/test/java/byuntil/backend/admin/service/AdminServiceTest.java[m
[1mindex e4ab971..ff4f3f5 100644[m
[1m--- a/src/test/java/byuntil/backend/admin/service/AdminServiceTest.java[m
[1m+++ b/src/test/java/byuntil/backend/admin/service/AdminServiceTest.java[m
[36m@@ -35,7 +35,7 @@[m [mclass AdminServiceTest {[m
         AdminDto adminDto = new AdminDto("l1222","비번1", auths);[m
 [m
         //when[m
[31m-        Long id = userDetailService.signUp(adminDto);[m
[32m+[m[32m        Long id = userDetailService.signUp(adminDto.toEntity());[m
         Admin admin = userDetailService.findById(id).get();[m
         //then[m
 [m
[1mdiff --git a/src/test/java/byuntil/backend/common/member/service/MemberServiceTest.java b/src/test/java/byuntil/backend/common/member/service/MemberServiceTest.java[m
[1mindex e23a6ce..174cd5f 100644[m
[1m--- a/src/test/java/byuntil/backend/common/member/service/MemberServiceTest.java[m
[1m+++ b/src/test/java/byuntil/backend/common/member/service/MemberServiceTest.java[m
[36m@@ -3,6 +3,7 @@[m [mpackage byuntil.backend.common.member.service;[m
 import byuntil.backend.admin.domain.Admin;[m
 import byuntil.backend.admin.domain.dto.AdminDto;[m
 import byuntil.backend.admin.repository.AdminRepository;[m
[32m+[m[32mimport byuntil.backend.admin.service.UserDetailService;[m
 import byuntil.backend.member.domain.entity.member.Member;[m
 import byuntil.backend.member.domain.entity.member.Professor;[m
 import byuntil.backend.member.domain.repository.MemberRepository;[m
[36m@@ -27,6 +28,8 @@[m [mclass MemberServiceTest {[m
     MemberRepository memberRepository;[m
     @Autowired[m
     AdminRepository adminRepository;[m
[32m+[m[32m    @Autowired[m
[32m+[m[32m    UserDetailService userDetailService;[m
 [m
     @Autowired[m
     MemberService memberService;[m
[36m@@ -68,38 +71,49 @@[m [mclass MemberServiceTest {[m
         String adminId = beforeMember.getAdmin().getLoginId();[m
         memberService.delete(beforeMember.getId());[m
         //then[m
[31m-[m
         Assertions.assertThat(!adminRepository.findByLoginId(adminId).isPresent());[m
[31m-[m
[32m+[m[32m        Assertions.assertThat(!memberRepository.findById(beforeMember.getId()).isPresent());[m
         //Assertions.assertThat(memberService.findAllMember()).isEmpty();[m
     }[m
 [m
     @Test[m
[32m+[m[32m    @Transactional[m
     public void 멤버업데이트() throws Throwable {[m
         //given[m
[31m-        ProfessorSaveRequestDto professor = createProfessorDto();[m
[31m-        Long id = memberService.saveMember(professor);[m
[32m+[m[32m        //origin[m
[32m+[m[32m        ProfessorSaveRequestDto originMemberDto = createProfessorDto();[m
[32m+[m[32m        Long id = memberService.saveMember(originMemberDto);[m
 [m
[31m-        MemberUpdateRequestDto updateMember = MemberUpdateRequestDto.builder()[m
[31m-                .email("asdfa")[m
[32m+[m[32m        //new[m
[32m+[m[32m        Collection<GrantedAuthority> auth = new ArrayList<>();[m
[32m+[m[32m        auth.add(new SimpleGrantedAuthority("ROLE_ADMIN"));[m
[32m+[m[32m        AdminDto updateAdminDto = new AdminDto("새로운 id", "새로운비번", auth);[m
[32m+[m
[32m+[m[32m        MemberUpdateRequestDto updateMemberDto = MemberUpdateRequestDto.builder()[m
[32m+[m[32m                .email("변경후")[m
                 .image("asdfasdfa")[m
[31m-                .name("홍길동")[m
[32m+[m[32m                .name("홍길동2")[m
                 .major("asdfasdfsa")[m
                 .doctorate("A")[m
                 .location("서울")[m
[32m+[m[32m                .adminDto(updateAdminDto)[m
                 .number("01096574723")[m
                 .build();[m
[32m+[m
         Member beforeMember = (Member) memberService.findOneMember(id).get();[m
         //when[m
[31m-        memberService.updateMember(id, updateMember);[m
[31m-        //then[m
[32m+[m[32m        Member member = memberService.updateMember(id, updateMemberDto);[m
[32m+[m[32m        userDetailService.encodedPw(member.getAdmin());[m
[32m+[m[32m        Admin updateAdmin = userDetailService.findByLoginId(member.getAdmin().getLoginId()).get();[m
         Member afterMember = (Member) memberService.findOneMember(id).get();[m
[31m-        Assertions.assertThat(beforeMember.getName()).isNotEqualTo(afterMember.getName());[m
[32m+[m[32m        //then[m
[32m+[m[32m        Assertions.assertThat(updateMemberDto.getName()).isEqualTo(afterMember.getName());[m
[32m+[m[32m        Assertions.assertThat(updateAdminDto.getLoginId()).isEqualTo(updateAdmin.getLoginId());[m
     }[m
     public ProfessorSaveRequestDto createProfessorDto(){[m
         Collection<GrantedAuthority> auth = new ArrayList<>();[m
         auth.add(new SimpleGrantedAuthority("ROLE_ADMIN"));[m
[31m-        AdminDto adminDto = new AdminDto("성공?!", "pw1", auth);[m
[32m+[m[32m        AdminDto adminDto = new AdminDto("1234", "pw1", auth);[m
         return ProfessorSaveRequestDto.builder()[m
                 .email("asdfa")[m
                 .image("asdfasdfa")[m
