plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'byuntil'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '16'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
    annotationProcessor 'org.projectlombok:lombok'
    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-aws
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.6.RELEASE'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    // Spring Security 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //test lombok
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    //타임리프
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    // https://mvnrepository.com/artifact/io.findify/s3mock
    //testImplementation group: 'io.findify', name: 's3mock_2.13', version: '0.2.6'
    // https://mvnrepository.com/artifact/io.findify/s3mock
    testImplementation group: 'io.findify', name: 's3mock_2.12', version: '0.2.4'

    // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.3'



}

def webappDir = "$projectDir/src/main/frontend" sourceSets { main { resources { srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"] } } } processResources { dependsOn "buildReact" } task buildReact(type: Exec) { dependsOn "installReact" workingDir "$webappDir" inputs
    . dir "$webappDir" group =
    BasePlugin.BUILD_GROUPif(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) { commandLine "npm.cmd", "run-script", "build" }
    else { commandLine "npm", "run-script", "build" } } task installReact(type: Exec) { workingDir "$webappDir" inputs .
    dir "$webappDir" group =
    BasePlugin.BUILD_GROUPif(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) { commandLine "npm.cmd", "audit", "fix" commandLine 'npm.cmd', 'install' }
    else { commandLine "npm", "audit", "fix" commandLine 'npm', 'install' } }

tasks.named('test') {
    useJUnitPlatform()
}
